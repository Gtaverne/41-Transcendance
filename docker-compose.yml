version: '3.8'
services:

  proxy:
    container_name: proxy
    image: nginx:latest
    restart: always
    ports:
      - 3000:80
      - 443:443
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - trans_network
    depends_on:
      - backend
      - frontend
    logging:
      driver: none

  frontend:
    container_name: frontend
    hostname: frontend
    depends_on:
      - backend
    build:
      context: ./frontend/.
      args:
        - REACT_APP_CLIENT_ID=${CLIENT_ID}
        - REACT_APP_URL_BACK=http://localhost:3000/api/
        - REACT_APP_STORAGE_PATH=http://localhost:3000/api/microcdn/
    restart: always
    networks:
      - trans_network
    volumes:
      - front_data:/app/

  backend:
    container_name: backend
    hostname: backend
    depends_on:
      - db
    build:
      context: ./backend/.
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=transcendance_db
      - BACKEND_PORT=3000
      - INTRA_API=https://api.intra.42.fr/oauth/token
      - Auth_URL=https://api.intra.42.fr/oauth/authorize
      - Access_Token_URL=https://api.intra.42.fr/oauth/token
      - Client_ID=${CLIENT_ID}
      - Client_Secret=${CLIENT_SECRET}
      - JWT_Secret=${JWT_SECRET}
    networks:
      - trans_network
    restart: always
    volumes:
      - cdn:/app/microcdn
      - back_data:/app/

  db:
    container_name: db
    hostname: database
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=transcendance_db
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - trans_network
    # A retirer en production
    ports:
      - 5432:5432


  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - trans_network


volumes:
  back_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backend/
  front_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./frontend/
  db_data:

  cdn:
    driver: local
    driver_opts:
        type: 'none'
        o: 'bind'
        device: './microcdn'

networks:
  trans_network:
